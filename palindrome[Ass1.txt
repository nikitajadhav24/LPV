# Client.java 

import java.rmi.*;

public class Client {
	public static void main(String args[]) {
		try {
			String rmiURL = "rmi://localhost/Server";
			ServerInterface serverInterface = (ServerInterface) Naming.lookup(rmiURL);
			String s = args[0];
			boolean isPalindrome = serverInterface.palindrome(s);
			String result = isPalindrome ? "Yes" : "No";
			System.out.println("At Client: palindrome(" + s + ") = " + result);
		} catch (Exception e) {
			System.out.println("Exception: " + e);
		}
	}
}


# Server.java

import java.rmi.*;

public class Server {
	public static void main(String args[]) {
		try {
			ServerImplementation serverImplementation = new ServerImplementation();
			Naming.rebind("Server", serverImplementation);
			System.out.println("Server Started...");
		} catch (Exception e) {
			System.out.println("Exception: " + e);
		}
	}
}


# ServerImplementation.java

import java.rmi.*;
import java.rmi.server.*;

public class ServerImplementation extends UnicastRemoteObject implements ServerInterface {
	public ServerImplementation() throws RemoteException {}
	public boolean palindrome(String s) {
		int length = s.length();
		// Iterate through the string form both ends
		for (int i = 0; i < (length / 2); i++) {
			// Compare characters from oposite ends
			if (s.charAt(i) != s.charAt(length - i - 1)) {
				System.out.println("At Server: palindrome(" + s + ") = No");
				return false; // If characters don't match, it's not palindrome
			}
		}
		// If we reach here, the string is a palindrome
		System.out.println("At Server: palindrome(" + s + ") = Yes");
		return true;
	}
}


# ServerInterface.java

import java.rmi.*;

public interface ServerInterface extends Remote {
	boolean palindrome(String s) throws RemoteException;
}


# Commands

javac *.java
rmic ServerImplementation
rmiregistry

java Server

java Client aba